<link rel="import" href="../../bower_components/polymer/polymer-element.html">
<link rel="import" href="../../bower_components/app-layout/app-header-layout/app-header-layout.html">
<link rel="import" href="../../bower_components/app-layout/app-header/app-header.html">
<link rel="import" href="../../bower_components/app-layout/app-toolbar/app-toolbar.html">
<link rel="import" href="../../bower_components/iron-flex-layout/iron-flex-layout.html">
<link rel="import" href="../../bower_components/paper-tabs/paper-tabs.html">
<link rel="import" href="../../bower_components/paper-tabs/paper-tab.html">
<link rel="import" href="../../bower_components/iron-pages/iron-pages.html">
<link rel="import" href="../../bower_components/polymer/lib/utils/flattened-nodes-observer.html">


<dom-module id="step-operation-container">
  <template>
    <style>
        :host {
            display: block;
            position: relative;
            margin:0;
            height: 100%;
            @apply(--layout-flex);
            @apply(--layout-vertical);
        }
        
        app-toolbar{
            padding: 0;
            background-color: #eee;
            height: auto;
        }
        app-toolbar paper-tabs {
            width: 100%
        }
        
        .container{
            @apply(--layout-flex);
            @apply(--layout-vertical);
            position: relative
        }
        
        iron-pages{
            @apply(--layout-flex);
            @apply(--layout-vertical);
        }
        
        paper-tab.iron-selected{
            font-weight: bold
        }

        ::slotted(*){
        }
    </style>
    

    <app-header-layout fullbleed has-scrolling-region>
    
        <template is="dom-if" if="[[!hideNavbar]]">
            <app-header fixed>
                <app-toolbar bottom-item>
                    <paper-tabs id="tabs" selected="{{selected}}" fit-container scrollable noink hide-scroll-buttons>
                        <template is="dom-repeat" items="{{operation.steps}}">
                            <paper-tab disabled="{{!item.enabled}}">[[_itemName(item)]]</paper-tab>
                        </template>
                    </paper-tabs>
                </app-toolbar>
            </app-header>
        </template>
        
        <div class="container">
            <iron-pages selected="{{selected}}">
            
                <slot id="slot"></slot>
                
            </iron-pages>
        </div>
    </app-header-layout>

  </template>

  <script>
    /**
     * `p-step-operation-container`
     * Step operations container component
     *
     * @customElement
     * @polymer
     * @demo demo/index.html
     */
     
    import StepOperationMixin from './module';
    
     
    class StepOperationContainer extends StepOperationMixin(Polymer.Element) {
        static get is() { return 'step-operation-container'; }
        static get properties() {
            return {
                hideNavbar: {
                    type: Boolean,
                    value: false,
                    reflectToAttribute: true
                },
                
            };
        }

        static get observers(){
            return [
                '_resultsChanged(operation.steps.*)',
                '_selectedChanged(selected, _stepOperation)', ];
        }
        
        _resultsChanged(change){
            console.log('!!operation results changed', change);
            if(change.path !== 'operation.steps' && change.path.indexOf('.enabled') == -1){
                
                // result has chaged
                let stepResult = change.value;
                if(stepResult){
                    let stepPath = change.path.replace('.result', '');
                    let stepKey = this.get(stepPath + '.key');
                    
                    this._stepOperation.setActiveStepResult(stepResult);
                }
            }
        }
        
        _selectedChanged(selected, stepOperation){

            if(stepOperation && this._stepOperation.getActiveStep() != selected){
                //console.log('SELECTED CHANGED', selected);
                this._stepOperation.setActiveStep(selected);
            }
        }
        
        
        _setOperationStepsProperties(){
            // Use observer to set operation-step object ids
            this._observer = new Polymer.FlattenedNodesObserver(this.$.slot, (info) => {
                let n = info.addedNodes.filter(function(node) {
                    return (node.nodeType === Node.ELEMENT_NODE);
                });
                for(let i=0; i<n.length; i++){
                    n[i].setAttribute('index', i);
                    n[i]._stepOperationContainer = this;
                }
            });
        }
        
        ready(){
            super.ready();
            
            this._setOperationStepsProperties();
            
            // Check component initialization parameters
            if(this.operationAsString==undefined){
                if(this.operation == undefined){
                    throw 'Either operation-as-string or operation parameters must be set';
                }
                else {
                    //console.log('setting by operation');
                    this._stepOperation = new StepOperation(this.operation, document);
                }
            }
            else{
                //console.log('setting by string');
                this.operation = JSON.parse(this.operationAsString);
                this._stepOperation = new StepOperation(this.operation, document);
            }
            
            console.log('operation object', this._stepOperation);
            
            Polymer.RenderStatus.afterNextRender(this, function() {
                addEventListener('setActiveStep', (e) => {
                    console.log('setActiveStep EVENT', e, e.detail);
                    this.set('selected', e.detail);
                });
            });
            
        }
        
        _itemName(item){
            console.log('itemName', item)
            return gettext(item.name);
        }
        
        clear(){
            this._stepOperation.clear()
        }
        
        goBack(){
            this._stepOperation.stepBack();
        }
        
    }

    window.customElements.define(StepOperationContainer.is, StepOperationContainer);
  </script>
</dom-module>

